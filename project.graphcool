# project: cj7gdhdwb02te01141lbxk8vo
# version: 20

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User implements Node {
  createdAt: DateTime!
  email: String @isUnique
  id: ID! @isUnique
  invites: [Invite!]! @relation(name: "UserInvites")
  pursuer: [TradeRequest!]! @relation(name: "UserPursuing")
  name: String!
  password: String
  updatedAt: DateTime!
  items: [Item!]! @relation(name: "UserItems")
  pursued: [TradeRequest!]! @relation(name: "UserPursued")
}

type Invite implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  inviter: [User!]! @relation(name: "UserInvites")
  invitee: String @isUnique
  status: TradeRequestStatus
  updatedAt: DateTime!
}

type TradeRequest implements Node {
  id: ID! @isUnique
  pursuer: User! @relation(name: "UserPursuing")
  pursued: User! @relation(name: "UserPursued")
  status: TradeRequestStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TradeRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ItemStatus {
  FREE
  SHARE
}

type Item implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  owner: User! @relation(name: "UserItems")
  tags: [Tag!]! @relation(name: "ItemTags")
  title: String!
  status: ItemStatus
  updatedAt: DateTime!
}

type Tag implements Node {
  id: ID! @isUnique
  key: String!
  items: [Item!]! @relation(name: "ItemTags")
  createdAt: DateTime!
  updatedAt: DateTime!
}